<?php

include_once 'link_field.inc';

/**
 * Implements hook_field_info().
 * 
 */
function link_field_field_info() {
  return array(
    'link_field' => array(
      'label' => t('Link field'),
      'description' => t('Simple link field.'),
      'default_widget' => 'link_field_form',
      'default_formatter' => 'link_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 * 
 * First check if url is valid.
 * Then make request to github.com to obtain valid response.
 *  
 * @see field_example_field_widget_error()
 * @see valid_url()
 * @see drupal_http_request()
 */
function link_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['url'])) {
      if (empty($item['link_text'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'link_field_invalid',
          'message' => t('Link text is required.'),
        );
        continue;
      }
      if (!valid_url($item['url'], TRUE)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'link_field_invalid',
          'message' => t('Link must be valid url.'),
        );
        continue;
      }
      $response = drupal_http_request($item['url']);
      if ($response->code != 200) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'link_field_invalid',
          'message' => t('This url hen not valid response'),
        );
        continue;
      }
    }
    if (!empty($item['link_text'])) {
      if (empty($item['url'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'link_field_invalid',
          'message' => t('Link url is required.'),
        );
        continue;
      }
      if ($item['title'] != strip_tags($item['title'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'link_field_invalid',
          'message' => t('Link text must be clean of html tags.'),
        );
        continue;
      }
    }
    if (!empty($item['title'])) {
      if ($item['title'] != strip_tags($item['title'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'link_field_invalid',
          'message' => t('Link title must be clean of html tags.'),
        );
        continue;
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 * 
 * @param array $item
 * @param array $field
 * @return boolean
 */
function link_field_field_is_empty($item, $field) {
  $ret = FALSE;
  if ($field['type'] == 'link_field') {
    if (empty($item['url']) && empty($item['link_text'])) {
      $ret = TRUE;
    }
  }
  return $ret;
}

/**
 * Implements hook_field_formatter_info_alter().
 * 
 * @see https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_formatter_info/7 .
 */
function link_field_field_formatter_info() {
  return array(
    'link_formatter' => array(
      'label' => t('Link'),
      'field types' => array('link_field'),
      'description' => t('field description'),
    )
  );
}

/**
 * Implemntes hook_field_formatter_view();
 * 
 */
function link_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'link_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => _link_formater_callback($item),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function link_field_field_widget_info() {
  return array(
    'link_field_form' => array(
      'label' => t('text'),
      'field types' => array('link_field'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 * 
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 */
function link_field_form_alter(&$form, &$form_state, $form_id) {
  $path = _link_field_path();
  $form['#attached']['css'] = array(
    $path . '/link_field.css',
  );
  return $form;
}

/**
 * Implements hook_field_widget_form().
 * 
 * @param type $form
 * @param type $form_state
 * @param type $field
 * @param type $instance
 * @param type $langcode
 * @param type $items
 * @param type $delta
 * @param type $element
 * @return string
 */
function link_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'link_field_form') {
    $widget = $instance['widget'];
    $settings = $widget['settings'];
    $element['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Link URL'),
      '#description' => t('This field accepts absolute URLs paths in the following format: https://api.drupal.org'),
      '#default_value' => isset($items[$delta]['url']) ? $items[$delta]['url'] : '',
      '#prefix' => '<h4>' . t('Link field') . '</h4><div class="link_field_url_wrapper">',
      '#suffix' => '</div>',
    );
    $element['link_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Link text'),
      '#description' => t('Text lo display on link'),
      '#default_value' => isset($items[$delta]['link_text']) ? $items[$delta]['link_text'] : '',
      '#prefix' => '<div class="link_field_link_text_wrapper">',
      '#suffix' => '</div>',
    );
    $element['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Link title'),
      '#description' => t('Link anchor text'),
      '#default_value' => isset($items[$delta]['title']) ? $items[$delta]['title'] : '',
      '#prefix' => '<fieldset class="collapsible link_field_attributes_wrapper collapsed">'
      . '<legend><span class="fieldset-legend link_field_attributes_label">'
      . '<span class="fieldset-legend-prefix element-invisible">View</span>'
      . '<a class"fieldset-title" href="#">' . t('Link attributes') . '</a>'
      . '<span class="summary"></span></span></legend>'
      . '<div class="fieldset-wrapper link_field_attributes">'
      . '<div class="link_field_title_wrapper">',
      '#suffix' => '</div>',
    );
    $element['rel'] = array(
      '#type' => 'textfield',
      '#title' => t('Link rel'),
      '#description' => t('values: <em>nofollow</em> for external links, left empty for <em>dofollow</em> links.'),
      '#default_value' => isset($items[$delta]['rel']) ? $items[$delta]['rel'] : '',
      '#prefix' => '<div class="link_field_link_rel_wrapper">',
      '#suffix' => '</div>',
    );
    $element['target'] = array(
      '#type' => 'textfield',
      '#title' => t('Link target'),
      '#description' => t('values: <em>_blank</em> opens link in a new window...'),
      '#default_value' => isset($items[$delta]['target']) ? $items[$delta]['target'] : '',
      '#prefix' => '<div class="link_field_link_target_wrapper">',
      '#suffix' => '</div></div></fieldset>',
    );
  }
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see form_error()
 * 
 * @param type $element
 * @param type $error
 * @param type $form
 * @param type $form_state
 */
function link_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'link_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}
